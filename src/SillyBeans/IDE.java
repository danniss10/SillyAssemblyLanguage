/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package SillyBeans;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.plaf.basic.BasicButtonUI;

/**
 * Main frame for IDE
 *
 * @author Daniel Nissenbaum
 */
public class IDE extends javax.swing.JFrame {

    JFileChooser chooser;
    JFileChooser creator;
    int projCnt = 0;
    int currentProject = 0;
    Font font = new Font("Monospaced", Font.PLAIN, 13);
    ArrayList<Project> projects = new ArrayList<Project>(1);
    ArrayList<WorkSplitPane> workPanes = new ArrayList<WorkSplitPane>(1);
    ArrayList<Console> consoles = new ArrayList<Console>(1);
    Thread running;
    TreeSet<String> projNames = new TreeSet<String>();

    /**
     * IDE constructor
     */
    public IDE() {
        initComponents();
        this.setPreferredSize(Toolkit.getDefaultToolkit().getScreenSize());
        setSize(this.getPreferredSize());
        //System.out.println(Toolkit.getDefaultToolkit().getScreenSize());
        mainSplitPane.setDividerLocation((int) (this.getHeight() * .5));
        chooser = new JFileChooser("Choose a .txt file");
        creator = new JFileChooser("Create a .txt file");
        OutputPane.setFont(OutputPane.getFont().deriveFont(Font.PLAIN));
        this.bigSplitPane.setDividerLocation((int) (this.getWidth() * .99));
        IDE.enableOSXFullscreen(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        ToolBar = new javax.swing.JToolBar();
        New = new javax.swing.JButton();
        open = new javax.swing.JButton();
        save = new javax.swing.JButton();
        saveAll = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        asm = new javax.swing.JButton();
        run = new javax.swing.JButton();
        debug = new javax.swing.JButton();
        bigSplitPane = new javax.swing.JSplitPane();
        debugPane = new javax.swing.JTabbedPane();
        mainSplitPane = new javax.swing.JSplitPane();
        workPane = new javax.swing.JTabbedPane();
        OutputPane = new javax.swing.JTabbedPane();
        search = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        matchCaseRadio = new javax.swing.JRadioButton();
        Menu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        newProjectMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        saveAllMenu = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        Run = new javax.swing.JMenu();
        runMenuItem = new javax.swing.JMenuItem();
        debugMenuItem = new javax.swing.JMenuItem();
        asmMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SillyBeanz IDE 1.0");
        setMinimumSize(new java.awt.Dimension(730, 700));
        setSize(new java.awt.Dimension(730, 768));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                WindowClosing(evt);
            }
        });

        ToolBar.setFloatable(false);
        ToolBar.setRollover(true);

        New.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SillyBeans/new.png"))); // NOI18N
        New.setText("New");
        New.setToolTipText("Create new project");
        New.setFocusable(false);
        New.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        New.setMinimumSize(new java.awt.Dimension(900, 900));
        New.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        ToolBar.add(New);

        open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SillyBeans/open.png"))); // NOI18N
        open.setText("Open");
        open.setToolTipText("Open a project");
        open.setFocusable(false);
        open.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        open.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        ToolBar.add(open);

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SillyBeans/save.png"))); // NOI18N
        save.setText("Save");
        save.setToolTipText("Save selected project");
        save.setFocusable(false);
        save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        ToolBar.add(save);

        saveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SillyBeans/saveAll.png"))); // NOI18N
        saveAll.setText("Save All");
        saveAll.setToolTipText("Save all open projects");
        saveAll.setFocusable(false);
        saveAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllActionPerformed(evt);
            }
        });
        ToolBar.add(saveAll);
        ToolBar.add(jSeparator1);

        asm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SillyBeans/asm.png"))); // NOI18N
        asm.setText("Asm");
        asm.setToolTipText("Save and Assemble file");
        asm.setFocusable(false);
        asm.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        asm.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        asm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asmActionPerformed(evt);
            }
        });
        ToolBar.add(asm);

        run.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SillyBeans/run.png"))); // NOI18N
        run.setText("Run");
        run.setToolTipText("Run selected file");
        run.setFocusable(false);
        run.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        run.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });
        ToolBar.add(run);

        debug.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SillyBeans/debug.png"))); // NOI18N
        debug.setText("Debug");
        debug.setToolTipText("Debug selected file");
        debug.setFocusable(false);
        debug.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        debug.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugActionPerformed(evt);
            }
        });
        ToolBar.add(debug);

        bigSplitPane.setResizeWeight(1.0);
        bigSplitPane.setToolTipText("");
        bigSplitPane.setContinuousLayout(true);
        bigSplitPane.setMinimumSize(new java.awt.Dimension(0, 0));

        debugPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                debugPaneStateChanged(evt);
            }
        });
        bigSplitPane.setRightComponent(debugPane);

        mainSplitPane.setDividerSize(4);
        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainSplitPane.setResizeWeight(0.75);

        workPane.setToolTipText("Save all projects");
        workPane.setMinimumSize(new java.awt.Dimension(0, 0));
        workPane.setPreferredSize(new java.awt.Dimension(500, 700));
        workPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                workPaneStateChanged(evt);
            }
        });
        mainSplitPane.setLeftComponent(workPane);

        OutputPane.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        OutputPane.setMinimumSize(new java.awt.Dimension(0, 0));
        OutputPane.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        OutputPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                consolePaneStateChanged(evt);
            }
        });
        mainSplitPane.setRightComponent(OutputPane);

        bigSplitPane.setLeftComponent(mainSplitPane);

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        searchLabel.setText("Search:");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        matchCaseRadio.setText("Match Case");
        matchCaseRadio.setToolTipText("");
        matchCaseRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchCaseRadioActionPerformed(evt);
            }
        });

        File.setText("File");

        newProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
        newProjectMenuItem.setText("New Project");
        newProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMenuItemActionPerformed(evt);
            }
        });
        File.add(newProjectMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.META_MASK));
        openMenuItem.setText("Open Project");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        File.add(openMenuItem);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.META_MASK));
        saveMenu.setText("Save Project");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        File.add(saveMenu);

        saveAllMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK));
        saveAllMenu.setText("Save All");
        saveAllMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllMenuActionPerformed(evt);
            }
        });
        File.add(saveAllMenu);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Safe Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        File.add(quitMenuItem);

        Menu.add(File);

        Run.setText("Run");

        runMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.META_MASK));
        runMenuItem.setText("Run Selected Project");
        runMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMenuItemActionPerformed(evt);
            }
        });
        Run.add(runMenuItem);

        debugMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.META_MASK));
        debugMenuItem.setText("Debug Selected Project");
        debugMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugMenuItemActionPerformed(evt);
            }
        });
        Run.add(debugMenuItem);

        asmMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.META_MASK));
        asmMenuItem.setText("Assemble Selected Project");
        asmMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asmMenuItemActionPerformed(evt);
            }
        });
        Run.add(asmMenuItem);

        Menu.add(Run);

        setJMenuBar(Menu);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(bigSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(ToolBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(search, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 199, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(matchCaseRadio)
                        .add(0, 28, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ToolBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(searchLabel)
                            .add(search, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(matchCaseRadio))
                        .add(20, 20, 20)))
                .add(bigSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        if (projCnt == 0) {
            JOptionPane.showMessageDialog(null, "Please open or create a project",
                    "No Project Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        projects.get(currentProject).runProject();
    }//GEN-LAST:event_runActionPerformed

    private void debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugActionPerformed
        if (projCnt == 0) {
            JOptionPane.showMessageDialog(null, "Please open or create a project",
                    "No Project Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        projects.get(currentProject).debugProject();
        if (consoles.size() < 1) {
            this.bigSplitPane.setDividerLocation((this.getWidth() - debugPane.getPreferredSize().width) - 35);
        }
    }//GEN-LAST:event_debugActionPerformed

    private void newProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectMenuItemActionPerformed
        NewActionPerformed(evt);
    }//GEN-LAST:event_newProjectMenuItemActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        File loadFile = selectLoadFile();
        if (loadFile != null && projNames.contains(loadFile.getName())) {
            for (int i = 0; i < projects.size(); i++) {
                if (loadFile.getName().equals(projects.get(i).getName())) {
                    workPane.setSelectedIndex(i);
                    currentProject = i;
                    return;
                }
            }
        }
        if (loadFile != null) {
            workPanes.ensureCapacity(projCnt + 1);
            projects.ensureCapacity(projCnt + 1);
            workPanes.add(projCnt, new WorkSplitPane());
            projects.add(projCnt, new Project(loadFile, this, workPanes.get(projCnt).getTxtPane(), workPanes.get(projCnt).getLstArea(), new ScrollConsole(new Console()), OutputPane, debugPane));
            projects.get(projCnt).loadProject();
            workPane.addTab(projects.get(projCnt).getName(), workPanes.get(projCnt));
            workPane.setTabComponentAt(projCnt, new ExitTabComponent(workPane));
            workPane.setSelectedIndex(projCnt);
            workPanes.get(projCnt).setDividerLocation50();
            projNames.add(projects.get(projCnt).getName());
            currentProject = projCnt;
            projCnt++;
        }
    }//GEN-LAST:event_openActionPerformed

    private void workPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_workPaneStateChanged
        currentProject = workPane.getSelectedIndex();
    }//GEN-LAST:event_workPaneStateChanged

    private void asmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asmActionPerformed
        if (projCnt == 0) {
            JOptionPane.showMessageDialog(null, "Please open or create a project",
                    "No Project Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        projects.get(currentProject).saveProject();
        projects.get(currentProject).assembleProject();
        projects.get(currentProject).loadProject();
    }//GEN-LAST:event_asmActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if (projCnt == 0) {
            JOptionPane.showMessageDialog(null, "Please open or create a project",
                    "No Project Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        projects.get(currentProject).saveProject();
//        ExitTabComponent etc = (ExitTabComponent)workPane.getTabComponentAt(currentProject);
//        etc.setSavedFont();
    }//GEN-LAST:event_saveActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        File createFile = selectCreateFile();
        while (createFile != null && !createFile.getName().endsWith(".txt")) {
            JOptionPane.showMessageDialog(null, "File must end with .txt extention",
                    "error", JOptionPane.ERROR_MESSAGE);
            createFile = selectCreateFile();
        }
        if (createFile != null) {
            workPanes.ensureCapacity(projCnt + 1);
            projects.ensureCapacity(projCnt + 1);
            workPanes.add(projCnt, new WorkSplitPane());
            projects.add(projCnt, new Project(createFile, this, workPanes.get(projCnt).getTxtPane(), workPanes.get(projCnt).getLstArea(), new ScrollConsole(new Console()), OutputPane, debugPane));
            workPane.addTab(projects.get(projCnt).getName(), workPanes.get(projCnt));
            workPane.setTabComponentAt(projCnt, new ExitTabComponent(workPane));
            workPane.setSelectedIndex(projCnt);
            workPanes.get(projCnt).setDividerLocation50();
            currentProject = projCnt;
            projCnt++;
        }
    }//GEN-LAST:event_NewActionPerformed

    private void runMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMenuItemActionPerformed
        runActionPerformed(evt);
    }//GEN-LAST:event_runMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        openActionPerformed(evt);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void debugMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugMenuItemActionPerformed
        debugActionPerformed(evt);
    }//GEN-LAST:event_debugMenuItemActionPerformed

    private void WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_WindowClosing
        quit();
    }//GEN-LAST:event_WindowClosing

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_saveMenuActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        quit();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void asmMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asmMenuItemActionPerformed
        asmActionPerformed(evt);
    }//GEN-LAST:event_asmMenuItemActionPerformed

    private void consolePaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_consolePaneStateChanged
        try {
            debugPane.setSelectedIndex(OutputPane.getSelectedIndex());
        } catch (IndexOutOfBoundsException e) {
        }
    }//GEN-LAST:event_consolePaneStateChanged

    private void debugPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_debugPaneStateChanged
        OutputPane.setSelectedIndex(debugPane.getSelectedIndex());
    }//GEN-LAST:event_debugPaneStateChanged

    private void matchCaseRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchCaseRadioActionPerformed
        if (projCnt > 0) {
            if (matchCaseRadio.isSelected()) {
                projects.get(currentProject).setMatchCase(true);
            } else {
                projects.get(currentProject).setMatchCase(false);
            }
        }
    }//GEN-LAST:event_matchCaseRadioActionPerformed

    private void searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyTyped
    }//GEN-LAST:event_searchKeyTyped

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        if (evt.isActionKey()) {
            return;
        }
        if (projCnt > 0) {
            projects.get(currentProject).setSearchTerm(search.getText());
        }
    }//GEN-LAST:event_searchKeyReleased

    private void saveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllActionPerformed
        if (projCnt == 0) {
            JOptionPane.showMessageDialog(null, "Please open or create a project",
                    "No Project Selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (int j = 0; j < projects.size(); j++) {
            projects.get(j).saveProject();
            this.setSavedTabFont(j);
        }
    }//GEN-LAST:event_saveAllActionPerformed

    private void saveAllMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllMenuActionPerformed
        saveAllActionPerformed(evt);
    }//GEN-LAST:event_saveAllMenuActionPerformed

    public void quit() {
        for (int i = 0; i < projects.size(); i++) {
            int n = 0;
            Object[] options = {"Save all and quit", "Quit without saving", "Cancel"};
            if (!projects.get(i).isSaved()) {
                n = JOptionPane.showOptionDialog(null,
                        "Do you want to save all projects before quiting the IDE?", "Quitting",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null,
                        options,
                        options[2]);
                if (n == JOptionPane.CANCEL_OPTION || n == JOptionPane.CLOSED_OPTION) {
                    return;
                }
                if (n == JOptionPane.YES_OPTION) {
                    for (int j = 0; j < projects.size(); j++) {
                        projects.get(j).saveProject();
                    }
                }
                this.setVisible(false);
                this.dispose();
                System.exit(0);
            }
        }
        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }

    // opens file viewer and returns selected file
    private File selectLoadFile() {
        boolean selected = false;
        do {
            chooser.setFileFilter(new TextFilter());
            int returnVal = chooser.showOpenDialog(null);
            try {
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    if (chooser.accept(chooser.getSelectedFile())) {
                        return chooser.getSelectedFile();
                    } else {
                        JOptionPane.showMessageDialog(null, "Select a .txt file",
                                "error", JOptionPane.ERROR_MESSAGE);
                    }
                } else if (!selected) {
                    return null;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid file!",
                        "error", JOptionPane.ERROR_MESSAGE);
            }
        } while (true);
    }

    //opens file creator and returns created file
    private File selectCreateFile() {
        boolean selected = false;
        do {
            creator.setFileFilter(new TextFilter());
            int returnVal = creator.showDialog(null, "Create New Project");
            try {
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    if (creator.accept(chooser.getSelectedFile())) {
                        return creator.getSelectedFile();
                    } else {
                        JOptionPane.showMessageDialog(null, "Create a .txt file",
                                "error", JOptionPane.ERROR_MESSAGE);
                    }
                } else if (!selected) {
                    return null;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid file!",
                        "error", JOptionPane.ERROR_MESSAGE);
            }
        } while (true);
    }

    /**
     * sets the tab of the current project bold
     */
    public void setUnsavedTabFont() {
        if (workPane.getTabCount() == 0) {
            return;
        }
        ExitTabComponent etc = (ExitTabComponent) workPane.getTabComponentAt(currentProject);
        etc.setUnsavedFont();
    }
/**
 * sets the tab of the current project non bold
 */
    public void setSavedTabFont() {
        if (workPane.getTabCount() == 0) {
            return;
        }
        setSavedTabFont(currentProject);
    }
/**
 * sets the tab of project projectNumber bold
 * @param projectNumber project to set font
 */
    public void setSavedTabFont(int projectNumber) {
        if (workPane.getTabCount() == 0) {
            return;
        }
        ExitTabComponent etc = (ExitTabComponent) workPane.getTabComponentAt(projectNumber);
        etc.setSavedFont();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {

                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
            //System.setProperty("apple.laf.useScreenMenuBar", "true");
            //System.setProperty("com.apple.mrj.application.apple.menu.about.name", "Test");
            //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JButton New;
    private javax.swing.JTabbedPane OutputPane;
    private javax.swing.JMenu Run;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton asm;
    private javax.swing.JMenuItem asmMenuItem;
    private javax.swing.JSplitPane bigSplitPane;
    private javax.swing.JButton debug;
    private javax.swing.JMenuItem debugMenuItem;
    private javax.swing.JTabbedPane debugPane;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JRadioButton matchCaseRadio;
    private javax.swing.JMenuItem newProjectMenuItem;
    private javax.swing.JButton open;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton run;
    private javax.swing.JMenuItem runMenuItem;
    private javax.swing.JButton save;
    private javax.swing.JButton saveAll;
    private javax.swing.JMenuItem saveAllMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JTextField search;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTabbedPane workPane;
    // End of variables declaration//GEN-END:variables

    /*
     * This origional Class is from a java tutorial provided by Oracle and can be found at
     * http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html
     * 
     * I have modified it slightly to check if its contents have been saved
     */
    private class ExitTabComponent extends JPanel {

        private final JTabbedPane pane;
        private Font saved = this.getFont().deriveFont(Font.PLAIN);
        private Font unsaved = this.getFont().deriveFont(Font.BOLD);
        JLabel label;

        public ExitTabComponent(final JTabbedPane pane) {
            //unset default FlowLayout' gaps
            super(new FlowLayout(FlowLayout.LEFT, 0, 0));
            if (pane == null) {
                throw new NullPointerException("TabbedPane is null");
            }
            this.pane = pane;
            setOpaque(false);

            //make JLabel read titles from JTabbedPane
            label = new JLabel() {
                public String getText() {
                    int i = pane.indexOfTabComponent(ExitTabComponent.this);
                    if (i != -1) {
                        return pane.getTitleAt(i);
                    }
                    return null;
                }
            };
            label.setFont(saved);
            add(label);
            //add more space between the label and the button
            label.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
            //tab button
            JButton button = new TabButton();
            add(button);
            //add more space to the top of the component
            setBorder(BorderFactory.createEmptyBorder(2, 0, 0, 0));
        }

        public void setSavedFont() {
            label.setFont(saved);
        }

        public void setUnsavedFont() {
            label.setFont(unsaved);
        }

        private class TabButton extends JButton implements ActionListener {

            public TabButton() {
                int size = 17;
                setPreferredSize(new Dimension(size, size));
                setToolTipText("close this tab");
                //Make the button looks the same for all Laf's
                setUI(new BasicButtonUI());
                //Make it transparent
                setContentAreaFilled(false);
                //No need to be focusable
                setFocusable(false);
                setBorder(BorderFactory.createEtchedBorder());
                setBorderPainted(false);
                //Making nice rollover effect
                //we use the same listener for all buttons
                addMouseListener(buttonMouseListener);
                setRolloverEnabled(true);
                //Close the proper tab by clicking the button
                addActionListener(this);
            }
            //This method has been modified to match my code.
            @Override
            public void actionPerformed(ActionEvent e) {
                int n = 0;
                int i = pane.indexOfTabComponent(ExitTabComponent.this);
                if (!projects.get(i).isSaved()) {

                    n = JOptionPane.showConfirmDialog(null,
                            "Do you want to save " + projects.get(i).getName() + " before closing?",
                            "Close Project", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                }
                if (n == JOptionPane.YES_OPTION) {
                    projects.get(i).saveProject();
                }

                if (i != -1 && n != JOptionPane.CANCEL_OPTION && n != JOptionPane.CLOSED_OPTION) {
                    pane.remove(i);
                    projNames.remove(projects.get(i).getName());
                    projects.remove(i);
                    projCnt--;
                }

            }

            //we don't want to update UI for this button
            public void updateUI() {
            }

            //paint the cross
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g.create();
                //shift the image for pressed buttons
                if (getModel().isPressed()) {
                    g2.translate(1, 1);
                }
                g2.setStroke(new BasicStroke(2));
                g2.setColor(Color.BLACK);
                if (getModel().isRollover()) {
                    g2.setColor(Color.GRAY);
                }
                int delta = 6;
                g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight() - delta - 1);
                g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight() - delta - 1);
                g2.dispose();
            }
        }
        private MouseListener buttonMouseListener = new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                Component component = e.getComponent();
                if (component instanceof AbstractButton) {
                    AbstractButton button = (AbstractButton) component;
                    button.setBorderPainted(true);
                }
            }

            public void mouseExited(MouseEvent e) {
                Component component = e.getComponent();
                if (component instanceof AbstractButton) {
                    AbstractButton button = (AbstractButton) component;
                    button.setBorderPainted(false);
                }
            }
        };
    }

    /**
     * @param window
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    public static void enableOSXFullscreen(Window window) {

        try {
            Class util = Class.forName("com.apple.eawt.FullScreenUtilities");
            Class params[] = new Class[]{Window.class, Boolean.TYPE};
            Method method = util.getMethod("setWindowCanFullScreen", params);
            method.invoke(util, window, true);
        } catch (ClassNotFoundException e1) {
        } catch (Exception e) {
            //System.out.(Level.WARNING, "OS X Fullscreen FAIL", e);
        }
    }
}
